
Spring boot简介
		1、Spring boot是Spring家族中的一个全新的框架，它是用来简化Spring应用程序的创建和开发过程，
		也可以说Spring boot能简化我们之前采用Spring mvc + Spring + MyBatis框架进行开发的过程；
		2、在以往我们采用Spring mvc + Spring + MyBatis框架进行开发的时候，搭建和整合三大框架，我们
		需要做很多工作，比如配置web.xml，配置Spring，配置MyBatis，并将他们整合在一起等，而Spring boot
		框架对此开发过程进行了革命性的颠覆，抛弃了繁琐的xml配置过程，采用大量的默认配置简化我们的开发过程
		3、所以采用Springboot可以非常容易和快速地创建基于Spring框架的应用程序，它让编码变的
		简单了，配置变简单了，部署变简单了，监控变简单了；
		4、正因为Spring boot它化繁为简，让开发变得极其简单和快速，所以在业界备受关注；
		5、Spring boot在国内的关注趋势图：http://t.cn/ROQLquP

Spring boot的特性
		1、能够快速创建基于Spring的应用程序
		2、能够直接使用java main方法启动内嵌的Tomcat，Jetty服务器运行Springboot程序，不需要部署war包文件；
		3、提供约定的starter POM来简化Maven配置，让Maven的配置变得简单
		4、根据项目的Maven依赖配置，Springboot自动配置Spring、Spring mvc等。
		5、提供了程序的健康检查等功能
		6、基本可以完全不使用XML配置文件，采用注解配置
Spring boot四大核心
		1、自动配置：针对很多Spring应用程序和常见的应用功能，Spring boot能自动提供相关配置
		2、起步依赖：告诉Spring boot需要什么功能，它就能引用需要的依赖库
		3、Actuator：让你能够深入运行中的Spring boot应用程序，一探Springboot程序的内部消息
		4、命令行界面：这是Spring boot的可选特性，主要针对Groovy语言使用；
		最主要的核心是1和2







1、推荐使用Spring boot最新版本，目前Spring Boot最新正式版本为1.5.9.RELEASE;
2、如果是使用Eclipse，推荐安装Spring Tool Suite(STS)插件；
3、如果使用IDEA旗舰版，自带了SpringBoot插件
4、推荐使用Maven 3.2+，Maven目标目前最新版本为3.5.2；
5、推荐使用java8，虽然Springboot也兼容Java6；

第一个Spring boot程序
	快速开发一个Spring boot程序步骤如下：
	1、创建一个Spring boot项目；
		1、方式一：使用eclipse的Spring Tools Suite(STS)插件/或者IDEA自带插件创建；
		2、方式二：直接使用Maven创建项目的方式创建：
	2、加入Spring boot的父级和起步依赖；
		1、父级依赖：
			<parent>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>1.5.9.RELEASE</version>
				<relativePath />
			</parent>
			加入Spring boot父级依赖可以简化我们项目的Maven配置：
		2、起步依赖：
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
			</dependency>
			加入Spring boot的起步依赖也可以简化我们项目的Maven配置：
	3、创建Spring boot的入口main方法；
		@SpringBootApplication
		public class SpringbootApplication{
			public static void main(String[] args){
				SpringApplication.run(SpringbootApplication.class,args);
			}
		}
	4、创建一个Spring MVC的Controller；
		@Controller
		public class HelloController{
			@RequestMapping("/sayHi")
			public @ResponseBody String sayHi(){
				return "Hi,Spring boot";
			}
		}
	5、运行Spring boot的入口main方法；
	至此，第一个Spring boot程序开发完成；
	
第一个Spring boot程序解析
		1、Spring boot的父级依赖spring-boot-starter-parent配置之后，当前的项目就是Spring boot项目；
		2、spring-boot-starter-parent是一个特殊的starter依赖，它用雷提供相关的Maven默认依赖，使用它
		之后，常用的jar包依赖可以省去version配置
		3、Spring Boot提供了那些默认jar包的依赖，可查看该父级依赖的pom文件
		4、如果不想使用某个默认依赖版本，可以通过pom.xml文件的属性配置覆盖各个依赖项，比不覆盖Spring版本：
		<properties>
			<spring.version>5.0.0.RELEASE</spring.version>
		</properties>
		5、@SpringBootApplication 注解是Spring Boot项目的核心注解，主要作用是开启spring自动配置
		6、main方法是一个标准的java程序的main方法，主要作用是作为项目启动运行的入口
		7、@Controller及@ResponseBody依然是我们之前的Spring mvc，因为Spring boot的里面依然是使用我们的
		Spring mvc + Spring + MyBatis等框架

Spring boot的核心配置文件
		Spring boot的核心配置文件用于配置Spring boot程序，有两种格式的配置文件：
		1、.properties文件：键值对的properties属性文件配置方式
		2、.yml文件
			yml是一种yaml格式的配置文件，主要采用一定的空格、换行等格式排版进行配置
			yaml是一种直观的能够被计算机识别的数据序列化格式，容易被人类阅读，yaml类似xml，
			但是语法比xml简洁很多
			值与前面的冒号配置项必须要有一个空格；
			yml后缀也可以使用yaml后缀
		配置示例
			#配置服务器端口
			server.port=9800
			#配置应用访问路径
			server.context-path=/13-springboot-web
			
			server:
				port:9091
				context-path:/13-springboot-web
		多环境配置文件
			#比如配置测试环境
				spring.profiles.active=dev
				application-dev.properties
			#比如配置生产环境
				spring.profiles.action=product
				application-product.properties
Spring boot自定义配置
	我们可以在Spring boot的核心配置文件中自定义配置，然后采用如下注解去读取配置的属性值：
	1、@Value注解
		用于逐个读取自定义的配置，比如：
		@Value("$(bjpowernode.name)")
		private String name;
	2、@ConfigurationProperties
		用于将整个文件映射成一个对象，比如：
		@Component
		@ConfigurationPropperties(prefix="bjpowernode")
		public class MyConfig{
			private String name;
			public String getName(){
				return name;
			}
			public void setName(String name){
				this.name = name;
			}
		}

Spring boot下的Spring mvc
	Spring boot下的Spring mvc和之前的Spring mvc使用是完全一样的：
	@Controller
		即为Spring mvc的注解，处理http请求：
	
	@RestController
		Spring4后新增注解：
		是@Controller与@ResponseBody的组合注解；
		用于返回字符串或json数据
	
	@GetMapping
		RequestMapping和Get请求方法的组合；
	
	@PostMapping
		RequestMapping和Post请求方法的组合；
	
	@PutMapping
		RequestMapping和Put请求方法的组合；
	
	@DeleteMapping
		RequestMapping和Delete请求方法的组合；

Spring boot使用JSP
	在Spring boot中使用jsp，按如下步骤进行：
	1、在pom.xml文件中配置依赖项
	<!-- 引入Spring boot内嵌的Tomcat对jsp的解析包 -->
	<dependency>
		<groupId>org.apache.tomcat.embed</groupId>
		<artifactId>tomcat-embed-jasper</artifactId>
	</dependency>
	
	<!-- servlet依赖的jar包start -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>javax.servlet-api</artifactId>
	</dependency>
	<!-- servlet依赖的jar包start -->
	
	<!-- jsp依赖jar包start -->
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
		<artifactId>javax.servlet.jsp-api</artifactId>
		<version>2.3.1</version>
	</dependency>
	<!-- jsp依赖jar包end -->
	
	<!-- jst标签依赖的jar包start -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
	</dependency>
	<!-- jst标签依赖的jar包end -->
	2、在application.properties文件配置spring mvc的视图展示位jsp：
		spring.mvc.view.prefix=/
		spring.mvc.view.suffix=.jsp
		
	3、在src/main在创建一个webapp目录，然后再该目录下新建jsp页面
		build中要配置备注中的配置信息：
			<resources>
				<resource>
					<directory>src/main/java</directory>
					<includes>
						<include>**/*.xml</include>
					</includes>
				</resource>
				<resource>
					<directory>src/main/resources</directory>
					<includes>
						<include>**/*.*</include>
					</includes>
				</resource>
				<resource>
					<directory>src/main/webapp</directory>
					<targetPath>META-INF/resources</targetPath>
					<includes>
						<include>**/*.*</include>
					</includes>
				</resource>
			</resources>
	
Spring boot集成MyBatis
	Spring boot集成MyBatis的步骤如下：
	1、在pom.xml中的配置相关jar依赖；
	<!-- 加载mybatis整合springboot -->
	<dependency>
		<groupId>org.mybatis.spring.boot</groupId>
		<artifactId>mybatis-spring-boot-starter</artifactId>
		<version>1.3.1</version>
	</dependency>
	
	<!-- MySQL的jdbc驱动包 -->
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
	</dependency>
	2、在Springboot的核心配置文件application.properties中配置MyBatis的Mapper.xml文件所在位置：
	mybatis.mapper-locations=classpath:com/bjpowernode/springboot/mapper/*.xml
	3、在Springboot的核心配置文件application.properties中配置数据源：
	spring.datasource.username=root
	spring.datasource.password=123456
	spring.datasource.driver-class-name=com.mysql.jdbc.Driver
	spring.datasource.url=?useUnicode=true&characterEncoding=utf-8&useSSL=false
	4、在MyBatis的Mapper接口中添加@Mapper注解或者在运行的主类上添加@MapperScan("com.
	bjpowernode.springboot.mapper")注解包扫描
	
Spring boot事务支持	
	Spring Boot使用事务非常简单；
	1、在入口类中使用注解@EnableTransactionManagement开启事务支持；
	2、在访问数据库的Service方法上添加注解@Transactional即可；

Spring boot实现RESTfull API
	认识RESTfull
		什么是RESTFull
			RESTFull一种互联网软件架构设计风格，但它并不是标准，它只是提出来一组客户端和服务器交互
			时的架构理念和设计原则，基于这种理念和原则设计的接口可以更简洁，更有层次；
		任何的技术都可以实现这种理念；
		REST这个词，是Roy Thomas Fielding在他2000年的博士论文中提出的；
		如果一个架构符合REST原则，就称它为RESTFull架构；
		比如我们要访问一个http接口：http://localhost:8080/api/order?id=1521&status=1
		采用RESTFull风格则http地址为：http://localhost:8080/api/order/1521/1
	Springboot开发RESTfull
		Spring boot开发RESTFull主要是几个注释实现：
		1、@PathVariable
			获取url中的数据；
			该注解是实现RESTFull最主要的一个注解；
		2、增加post方法
			PostMapping；
			接收和处理Post方式的请求
		3、删除delete方法
			DeleteMapping；
			接收delete方法的请求，可以使用GetMapping代替；
		4、修改put方法
			PutMapping；
			接收put方法的请求，可以用PostMapping代替；
		5、查询get方法
			GetMapping
			接收get方法的请求；
Spring boot热部署插件
	在实际开发中，我们修改某些代码逻辑功能或页面都需要重启应用，这样无形中降低了开发效率；
	热部署是指当我们修改代码后，服务能自动重启加载新修改的内容，这样大大提高了我们开发的效率；
	Spring boot热部署通过添加一个插件实现；
	插件为：spring-boot-devtools，在Maven中的配置如下：
	<!-- springboot开发自动热部署 -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
		<optional>true</optional>
	</dependency>
	该热部署插件在实际使用中会有一些小问题，明明已经重启，但是没效果，这种情况下，手动重启下程序；
Spring boot集成Redis
	Spring boot集成Redis的步骤如下：
	1、在pom.xml中配置相关的jar依赖；
	<!-- 加载spring boot redis包 -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-redis</artifactId>
	</dependency>
	2、在Springboot核心配置文件application.properties中配置redis连接信息；
	spring.redis.host=192.168.230.128
	spring.redis.port=6379
	spring.redis.password=123456
	3、配置了上面的步骤，Spring boot将自动配置Redis Template，在需要操作redis的类中注入redis Template；
	在使用的类中注入：
	@Autowired
	private RedisTemplate<String,String> redisTemplate;
	
	@Autowired
	private RedisTemplate<Object,Object> redisTemplate;
	
	Spring boot帮我们注入的redisTemplate类，泛型里面只能写<String,String>、<Object,Object>
	
	哨兵模式redis集群配置：
		redis：
			password:123456
			sentinel:
				master:mymaster
				nodes:192.168.179.128:26380,192.168.179.128:26382,192.168.179.128:26384
	
	注：redis穿透问题？？
	
Spring boot集成Dubbo
	集成前的准备
		1、阿里巴巴提供的dubbo集成springboot开源项目；https://github.com/alibaba
		2、我们将采用该项目提供的jar包进行集成；
		<!-- 添加dubbo集成springboot依赖 -->
		<dependency>
			<groupId>com.alibaba.spring.boot</groupId>
			<artifactId>dubbo-spring-boot-starter</artifactId>
			<version>1.0.0</version>
		</dependency>
	
	正式集成
		1、开发Dubbo服务接口
			？？
		2、开发Dubbo服务提供者
			1、创建一个Springboot项目并配置好相关的依赖；
			2、加入springboot与dubbo集成的起步依赖；
			<dependency>
				<groupId>com.alibaba.spring.boot</groupId>
				<artifactId>dubbo-spring-boot-starter</artifactId>
				<version>1.0.0</version>
			</dependency>
			3、在Springboot的核心配置文件application.properties中配置dubbo的信息；
			#WEB服务端口
			server.port=8080
			#dubbo配置
			spring.dubbo.appname=springboot-dubbo-provider
			spring.dubbo.registry=zookeeper://192.168.230.128:2181
			由于使用zookeeper作为注册中心，则需要加入zookeeper的客户端jar包；
			<dependency>
				<groupId>com.101tec</groupId>
				<artifactId>zkclient</artifactId>
				<version>0.10</version>
			</dependency>
			4、编写Dubbo的接口实现类
			import org.springframework.stereotype.Compoent;
			import com.alibaba.dubbo.config.annotation.Service;
			import com.bjpowernode.springboot.dubbo.service.Userservice；
			
			@Service(interfaceClass = UserService.class)//该注解是dubbo的
			@Component//该注解是Sping的
			public class UserServiceImplimplements UserService{
				@Override
				public String sayHi(String name){
					return "Hi," + name;
				}
			}
			5、编写一个入口main程序启动Dubbo服务提供者：
			@SpringBootApplication
			@EnableDubboConfiguration//开启dubbo配置支持
			public class SpringbootApplication{
				public static void main(String[] args){
					SpringApplication.run(SpringbootApplication.class,args);
				}
			}
		3、开发Dubbo服务消费者
			1、创建一个Springboot项目并配置好相关的依赖；
			2、加入springboot与dubbo集成的起步依赖；
			<dependency>
				<groupId>com.alibaba.spring.boot</groupId>
				<artifactId>dubbo-spring-boot-starter</artifactId>
				<version>1.0.0</version>
			</dependency>
			3、在Springboot的核心配置文件application.properties中配置dubbo的信息；
			#WEB服务端口
			server.port=8080
			#dubbo配置
			spring.dubbo.appname=springboot-dubbo-provider
			spring.dubbo.registry=zookeeper://192.168.230.128:2181
			由于使用zookeeper作为注册中心，则需要加入zookeeper的客户端jar包；
			<dependency>
				<groupId>com.101tec</groupId>
				<artifactId>zkclient</artifactId>
				<version>0.10</version>
			</dependency>
			4、编写一个Controller类，调用远程的Dubbo服务：
			@Controller
			public class UserController{
				@Reference //使用dubbo的注解引用远程的dubbo服务
				private UserService  userService
				@RequestMapping("/sayHi")
				public @ResponseBody String sayHi(){
					return userService.sayHi("Spring boot dubbo...");
				}
			}
			5、编写一个入口main程序启动Dubbo服务提供者：
			@SpringBootApplication
			@EnableDubboConfiguration//开启dubbo配置支持
			pulic class SpringbootApplication{
				pulic static void main(String[] args){
					SpringApplication.run(SpringbootApplication.class,args);
				}
			}

Spring boot使用拦截器

Spring boot使用Servlet
	
	
	
	
	
	
	
	
	
	
	
Spring MVC框架
	
	
	自定义类型的封装：
		javaEE只能获取三种类型；
			request.getParameter(name);
			request.getParameterValues(name);
			request.getInputStream();
			
		问：假如需要获取日期类型，该怎么处理？
			可以前台输入日期格式字符串（2018-01-01），通过转换器，转换成日期格式。
			
		springmvc内置了一些数据类型自动转换。内置转换器如下：
			。。。。。。
			。。。。。。
			。。。。。。
			。。。。。。
			。。。。。。
		如遇特殊类型转换要求，需要我们自己编写自定义类型转换器。
		
		
	编写自定义类型转换器：
		可以先看看Spring提供的转换器源码参考：org.springframework.core.convert.converter.Converter;
		
		<a href="test/helloConverter?createDate=2018-01-02">测试参数绑定-String->Date类型转换</a>
		
		@RequestMapping("/helloConverter")
		public String methodConverter(Account account) {
			System.out.println("测试参数绑定，简单案例执行了。。+"+account.getCreateDate());
			return "success";
		}
		
		public class Account implements Serializable {
			private String name;
			private Integer money;
			private Date createDate;
			.....
		}
		
		定义转换类
			public class StringToDateConverter implements Converter<String,Date> {
			//把字符串转成日期对象
			@Override
			public Date convert(String source) {
				DateFormat format = null;
				try {
					if(StringUtils.isEmpty(source)) {
						throw new NullPointerException("请传入正确的数据");
					}
					format = new SimpleDateFormat("yyyy-MM-dd");
					Date data = format.parse(source);
					return data;
				} catch (ParseException e) {
					throw new NullPointerException("请传入正确的日期格式：yyyy-MM-dd");
				}		
			}
		}
		
		自定义类型转换器的配置
			<!-- 配置自定义类型转换器：它的配置方式是采用注册服务的方式来实现的 -->
			<bean id="converterService" class="org.springframework.context.support.ConversionServiceFactoryBean">
				<property name="converters">
					<set>
						<bean class="com.kdd.web.StringToDateConverter"></bean>
					</set>
				</property>
			</bean>
			
			<!-- 配置Springmvc的注解驱动 -->
			<mvc:annotation-driven conversion-service="converterService"></mvc:annotation-driven>
	
	使用原始ServletAPI对象作为方法的参数：
		<!-- 使用原始servletAPI对象 -->
		<a href="test/helloServletAPI">访问原始ServletAPI对象</a>
		
		@RequestMapping("/helloServletAPI")
		public String methodServletAPI(HttpServletRequest request,HttpServletResponse response) {
			System.out.println(request);
			System.out.println(response);
			System.out.println(request.getSession());
			System.out.println(request.getServletContext());
			return "success";
		}
		
		
	
	常用注解
		1、RequestParam注解的使用：
			//requestParam注解的使用
			<a href="springmvc/testRequestParam?id=1">测试RequestParam</a>
			
			@Controller("accountController")
			@RequestMapping("/springmvc")
			public class AnnotationTestController{
				@RequestMapping("testRequestParam")
				public String testRequestParam(Integer accountID){
					System.out.println("测试RequestParam注解的使用："+accountID);
					return "success";
				}
			}
			
			改成：
				@RequestMapping("testRequestParam")
				public String testRequestParam(@RequestParam(value="id",required=false)Integer accountID){
					System.out.println("测试RequestParam注解的使用："+accountID);
					return "success";
				}
		
		2、requestBody注解的使用：
		//RequestBody注解使用
		<form account="Springmvc/testRequestBody" method="post">
			用户名：<input type="text" name="name"/><br/>
			密码：<input type="text" name="password"/><br/>
			<input type="submit" value="提交"/>
		</form>
		
		@RequestMapping("/testRequestBody")
		public String testRequestBody(@RequestBody String body){
			System.out.println("测试RequestBody注解的使用:"+body);
			return "success";
		}
		
		Rest风格的URL：
			如：
			新增
			传统风格：http://localhost:8080/saveAccount		post
			rest风格：http://localhost:8080/account			post
			
			修改
			传统风格：http://localhost:8080/updateAccount	post
			rest风格：http://localhost:8080/account/1		put
			
			删除 
			传统风格：http://localhost:8080/deleteAccount?id=1	get
			rest风格：http://localhost:8080/account/1			post
			
			查询
			传统风格：http://localhost:8080/findAccount?id=1	post
			rest风格：http://localhost:8080/account/1			post
		
		PathVariable注解的使用：
			作用
				用于绑定url中的占位符。如：请求url中/delete/{id},这个{id}就是占位符。
				url支持占位符是spring3.0之后加入的。是springmvc支持rest风格url的重要标志
			属性：
				value:用于指定url中占位符的名称
				required：是否必须提供占位符
			
			//pathVariable注解的使用
			<a href="springmvc/testPathVariavle/1">删除</a>
			
			@RequestMapping("/testPathVariable/{id}")
			public String testPathVariable(@PathVariable("id") Integer id){
				System.out.println("测试PathVariable注解的使用："+id);
				return "success";
			}
		
		了解的注解
			RequestHeader注解的使用：
			作用：
				用于获取请求消息头
			属性：
				value:提供消息名称
				required：是否必须提供消息头
			注：一般开发中不怎么使用
			
			CookieValue注解使用：
			作用：
				用于把指定cookie名称的值传入控制器方法参数
			属性：
				value：指定cookie的名称
				required：是否必须由此cookie
			示例：
				<a href="springmvc/testRequestHeader">测试requestHeader</a>
			
				@RequestMapping("/testRequestHeader")
				public String testRequestHeader(@RequestHeader("Accept-Language")String header){
					syso("测试RequestHeader注解的使用:"+header);
					return "success";
				}
				
				<a href="springmvc/testCookieValue">测试CookieValue</a>
				
				@RequestMapping("/testCookieValue")
				public String testCookieValue(@CookieValue("JSESSIONID")String value){
					syso("测试CookieValue注解的使用:"+value);
					return "success";
				}
			
			
			
			ModelAttribute的使用场景：
				作用：
					该注解是Springmvc4.3版本后加入的，它可以用于修饰方法和参数。
					出现在方法上，表示当前方法会在控制器的方法执行之前，先执行。它可以修饰没有返回值的方法，也可以修饰
					有具体返回值的方法。
					出现在参数上，获取指定的数据给参赋值。
				属性：
					value：用于获取数据的key。key可以是pojo的属性名称，也可以是map结构的key。
				应用场景：
					当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。
					例如：
						我们在编辑一个用户时，用户有一个创建信息的字段，该字段的值是不允许被修改的，在提交表单数据时，
						肯定没有此字段的内容，一旦更新会吧 该字段内容置为null，此时就可以使用此注解解决问题。
				使用示例：
					<form action="springmvc/testModelAttribute" method="psot">
						登录名：<input type="text" value="loginname"/>
						昵称：<input type="text" value="username"/>
						密码：<input type="text" value="password"/>
						<input type="submit" value="更新"/>
					<form>
					
					public class User implements Serializable{
						private String loginname;
						private String username;
						private String password;
						.......
					}
					
					@RequestMapping("/testModelAttribute")
					public String testModelAttribute(User user){
						Syso("测试ModelAttribute注解的使用："+user);
						return "success";
					}
					
					--------------------------------------
					<form action="springmvc/testModelAttribute" method="psot">
						昵称：<input type="text" value="username"/>
						密码：<input type="text" value="password"/>
						<input type="submit" value="更新"/>
					<form>
					
					@RequestMapping("/testModelAttribute")
					public String testModelAttribute(User user){
						Syso("接收到请求用户对象中的信息，即将调用业务层更新："+user);
						return "success";
					}
					@ModelAttribute
					public void testModelAttributeBeforeController(){
						//模拟去数据库先查了数据库中的用户信息
						User user = new User();
						user.setUsername("test");
						user.setUsername("1234");
						user.setUsername("login1");
						syso("数据库中用户的信息："+user);
					}
					
				console
					数据库中用户的信息User[loginname=login1,username=test,password=1234]
					接收到的请求用户对象中的信息，即将调用业务层更新：User[loginname=null,username=cgx,passoerd=1234]
					
					@ModelAttribute
					public User testModelAttributeBeforeController(){
						//模拟去数据库先查了数据库中的用户信息
						User user = new User();
						user.setUsername("test");
						user.setUsername("1234");
						user.setUsername("login1");
						syso("数据库中用户的信息："+user);
						return user;
					}
				
				基于Map的应用场景示例：ModelAttribute修饰方法不带返回值
					需求：
						修改用户信息，要求用户的密码不能修改jsp中的代码；
						<!-- 修改用户信息 -->
						<form action="springmvc/testModelAttribute" method="psot">
							用户名称：<input type="text" value="username"/>
							用户年龄：<input type="text" value="age"/>
							<input type="submit" value="保存"/>
						<form>
						控制器中的代码：
						/** 查询数据库中用户信息 */
						@ModelAttribute
						public void showModel(String username,Map<String,User> map){
							//模拟去数据库查询
							User user = findUserByName(username);
							syso("执行了showModel方法"+user);
							map.put("abc",user);
						}
	
	第二天
		响应部分内容说明：
			返回值分类：字符串、void、ModelAndView
			转发和重定向：forward转发、Redirect重定向
			ResponseBody响应json数据
				使用说明
				使用示例
		返回值分类：
			字符串
				controller方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。
				//指定逻辑视图名，经过视图解析器解析为jsp物理路径：/WEB-INF/pages/success.jsp 
				@RequestMapping("/testReturnString")
				public String testReturnString(){
					Syso("AccountController的testReturnString方法执行了");
					return "success";
				}
				
		测试返回字符串类型：
			<%--返回字符串--%>
			<a href="springmvc/testReturnString">测试返回字符串</a>
			
			@RequestMapping("/testReturnString")
			public String testReturnString(){
				return "error";
			}
			
		void返回值类型：
			<%--没有返回值--%>
			<a href="springmvc/testReturnVoid">测试Void</a>
			
			@RequestMapping("/testReturnVoid")
			public String testReturnVoid(){
				Syso("testReturnVoid方法执行了");
			}
			
			/**
				没有返回值
				当我们的方法返回void时，springmvc会把方法名作为前缀，前往指定的位置查找jsp
			*/
			@RequestMapping("/testReturnVoid")
			public String testReturnVoid(HttpServletRequest request,HttpServletRequest response) throws Exception{
				Syso("testReturnVoid方法执行了");
				request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);
			}
		
		使用原始servletAPI对象实现转发和重定向到jsp：
			目录结构：
				WebContent
					META-INF
					WEB-INF 
						lib
						pages 
							error.jsp 
							success.jsp 
						web.xml 
					index.jsp 
					redirectview.jsp 
					
				/**
				没有返回值
				当我们的方法返回void时，springmvc会把方法名作为前缀，前往指定的位置查找jsp
				*/
				@RequestMapping("/testReturnVoid")
				public String testReturnVoid(HttpServletRequest request,HttpServletRequest response) throws Exception{
					Syso("testReturnVoid方法执行了");
					//request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);
					response.sendRedirect(request.getContextPath()+"/redirectview.jsp");
				}
		
		
		使用原始servletAPI对象实现转发和重定向到另外的方法：
		
				@RequestMapping("/testReturnVoid")
				public String testReturnVoid(HttpServletRequest request,HttpServletRequest response) throws Exception{
					Syso("testReturnVoid方法执行了");
					//request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);
					//response.sendRedirect(request.getContextPath()+"/redirectview.jsp");
					response.sendRedirect("testReturnString");
				}
			
		把响应数据带回浏览器的方式-原始servletAPI对象：
		
				@RequestMapping("/testReturnVoid")
				public String testReturnVoid(HttpServletRequest request,HttpServletRequest response) throws Exception{
					Syso("testReturnVoid方法执行了");
					//request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);
					//response.sendRedirect(request.getContextPath()+"/redirectview.jsp");
					//response.sendRedirect("testReturnString");
					/**
						四大域对象
							page域			PageContext			最小		页面范围，出了当前页面就失效
							request域		ServletRequest					当前请求和当前请求的转发    	一次请求用
							session域		HttpSession						一次会话						多次请求用
							application域	ServletContext		最大		整个应用
					*/
					request.setAttribute("username","test");
					request.getRequestDispatcher("/WEB-INF/pages/success.jsp").forward(request,response);
				}
				
				success.jsp
					<body>
						执行成功
						${username}<%-- 相当于pageContext的findAttribute方法 --%>
						${requestScope.username}<%-- 明确从请求域中获取数据 --%>
					</body>
		
		ModelAndView返回值的使用：
		
			ModelAndView
			ModelAndView是Springmvc为我们提供的一个对象，该对象也可以用作控制器方法的返回值。
			该对象中有两个方法：
			public ModelAndView addObject(String attributeName,Object attributeValue){
				getModelMap().addAttribute(attributeName,attributeValue);
				return this;
			}
			//用于设置逻辑视图名称，视图解析器会根据名称前往指定的视图
			public void setViewName(@Nullable String viewName){
				......
			}
		
		springmvc的请求转发：
		springmvc的请求重定向：
		使用ServletAPI对象响应json数据：
		requestBody和responseBody组合使用：
		文件上传回顾：
		使用commons-fileupload实现文件上传：
		springmvc文件上传对象MultipartFile分析：
		
		跨服务器上传文件的服务器准备：
			1、eclipse中新整一个服务器
			2、设置服务器的部署目录到webapp中，配置端口号
			3、删除webapp中的部署的项目
			4、删除work中的部署的项目
			5、到service.xml最后面删除项目的一行配置
			6、启动服务器，访问首页
			7、新建项目，新建index.jsp，测试新建服务器能否正常访问
		借助jersey实现突破跨服务器上传：
			1、添加jar包
	
									https://wenku.baidu.com/view/23bdf1a30740be1e640e9a5b.html
		spring异常处理：
			1、新建工程--异常类和错误页面--异常处理器--异常配置
			自定义异常类：
			自定义异常处理器：
		
		Springmvc中的拦截器：
		自定义拦截器：
		新建工程
		拦截器放行：
		拦截器执行顺序：
		根据配置文件顺序决定拦截器顺序。
		自定义拦截器示例：
